# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions
# More info on Python, GitHub Actions, and Azure App Service: https://aka.ms/python-webapps-actions

name: Build and deploy Python app to Azure Web App - shruthinbot

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read #This is required for actions/checkout

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Create and start virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install google-generativeai==0.3.1
      
      - name: Create startup script
        run: |
          cat > startup.py << 'EOL'
          import os
          import subprocess
          import sys
          import time

          # Log function
          def log(message):
              print(message, flush=True)

          log("Starting custom startup script...")

          # Make sure pip is available
          log("Ensuring pip is installed...")
          try:
              subprocess.check_call([sys.executable, "-m", "pip", "--version"])
          except:
              log("Installing pip...")
              subprocess.check_call([sys.executable, "-m", "ensurepip"])

          # Install dependencies explicitly
          log("Installing Google Generative AI...")
          subprocess.check_call([sys.executable, "-m", "pip", "install", "google-generativeai==0.3.1"])

          log("Installing other dependencies...")
          dependencies = [
              "flask",
              "flask-cors",
              "chromadb",
              "nltk",
              "spacy",
              "numpy",
              "pdfplumber",
              "langchain",
              "langchain-huggingface",
              "langchain-chroma",
              "scikit-learn",
              "transformers",
              "datasets",
              "textblob",
              "gunicorn"
          ]

          for dep in dependencies:
              log(f"Installing {dep}...")
              try:
                  subprocess.check_call([sys.executable, "-m", "pip", "install", dep])
              except Exception as e:
                  log(f"Error installing {dep}: {str(e)}")

          # List installed packages
          log("Listing installed packages:")
          subprocess.check_call([sys.executable, "-m", "pip", "list"])

          # Start the application using gunicorn
          log("Starting application with gunicorn...")
          os.system("gunicorn --bind=0.0.0.0 --timeout 600 Backend_flask:app")
          EOL
          
      # Optional: Add step to run tests here (PyTest, Django test suites, etc.)
      - name: Zip artifact for deployment
        run: zip release.zip ./* -r

      - name: Upload artifact for deployment jobs
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: |
            release.zip
            !venv/

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: python-app

      - name: Unzip artifact for deployment
        run: unzip release.zip
      
      - name: 'Deploy to Azure Web App'
        uses: azure/webapps-deploy@v3
        id: deploy-to-webapp
        with:
          app-name: 'shruthinbot'
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE }}
